name: Build with CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows MSVC"
            os: windows-latest
            compiler: msvc
            cmake-generator: 'Visual Studio 17 2022'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release'
          
          - name: "Windows MinGW"
            os: windows-latest
            compiler: gcc
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++'
          
          - name: "Linux GCC"
            os: ubuntu-latest
            compiler: gcc
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++'
          
          - name: "Linux Clang"
            os: ubuntu-latest
            compiler: clang
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++'
          
          - name: "macOS Clang"
            os: macos-latest
            compiler: clang
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
      
    - name: Install Windows build tools
      if: matrix.compiler == 'gcc' && matrix.os == 'windows-latest'
      run: |
          choco install ninja
          choco install mingw
      shell: bash
      
    - name: Install Ninja (non-Windows)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y ninja-build libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libpipewire-0.3-dev libasound2-dev
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install ninja
        fi
            
    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build -G "${{ matrix.cmake-generator }}" ${{ matrix.cmake-options }}
      
    - name: Build
      shell: bash
      run: |
        cmake --build build --config Release

    - name: Upload Windows Artifact
      if: matrix.name == 'Windows MSVC'
      uses: actions/upload-artifact@v4
      with:
        name: Worm-Windows
        path: |
          build/Release/Worm.exe
          build/Release/assets/

    - name: Upload Linux Artifact
      if: matrix.name == 'Linux GCC'
      uses: actions/upload-artifact@v4
      with:
        name: Worm-Linux
        path: |
          build/Worm
          build/assets/

    - name: Upload macOS Artifact
      if: matrix.name == 'macOS Clang'
      uses: actions/upload-artifact@v4
      with:
        name: Worm-macOS
        path: |
          build/Worm
          build/assets/