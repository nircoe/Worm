name: Create Release

on:
  push:
    tags:
      - 'v*'  # Triggers on v1.0.0, v2.1.3, etc.

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows MSVC"
            os: windows-latest
            compiler: msvc
            cmake-generator: 'Visual Studio 17 2022'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release'
          
          - name: "Linux GCC"
            os: ubuntu-latest
            compiler: gcc
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++'
          
          - name: "macOS Clang"
            os: macos-latest
            compiler: clang
            cmake-generator: 'Ninja'
            cmake-options: '-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
      
    - name: Install Ninja (non-Windows)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y ninja-build libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libpipewire-0.3-dev libasound2-dev
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install ninja
        fi
            
    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build -G "${{ matrix.cmake-generator }}" ${{ matrix.cmake-options }}
      
    - name: Build
      shell: bash
      run: |
        cmake --build build --config Release

    - name: Create Windows Release Package
      if: matrix.name == 'Windows MSVC'
      shell: bash
      run: |
        mkdir -p release/Worm-Windows
        cp build/Release/Worm.exe release/Worm-Windows/
        cp -r build/Release/assets release/Worm-Windows/
        cd release && zip -r Worm-Windows.zip Worm-Windows/

    - name: Create Linux Release Package
      if: matrix.name == 'Linux GCC'
      shell: bash
      run: |
        mkdir -p release/Worm-Linux
        cp build/Worm release/Worm-Linux/
        cp -r build/assets release/Worm-Linux/
        cd release && zip -r Worm-Linux.zip Worm-Linux/

    - name: Create macOS Release Package
      if: matrix.name == 'macOS Clang'
      shell: bash
      run: |
        mkdir -p release/Worm-macOS
        cp build/Worm release/Worm-macOS/
        cp -r build/assets release/Worm-macOS/
        cd release && zip -r Worm-macOS.zip Worm-macOS/

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-release
        path: release/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/Windows MSVC-release/Worm-Windows.zip
          artifacts/Linux GCC-release/Worm-Linux.zip
          artifacts/macOS Clang-release/Worm-macOS.zip
        draft: false
        prerelease: false
        generate_release_notes: true